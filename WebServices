//
//  WebServices.swift
//  
//  Created by Shubham on 12/12/17.
//  Copyright © 2017 Shubham. All rights reserved.
//

// in this I am using 3rd Party pods that are Alamofire and Dotzu(u can use this to see response from Api)
import Foundation
import Alamofire
import UIKit
import Dotzu

typealias CompletionBlock = (AnyObject, AnyObject) -> Void
typealias FailureBlock = (AnyObject, AnyObject) -> Void

// ((Swift.Int) -> Swift.Void)? = nil )

// reference links
// http://fuckingswiftblocksyntax.com
/// https://www.raywenderlich.com/121540/alamofire-tutorial-getting-started

let configuration = URLSessionConfiguration.default
class WebServices {
    static let sessionManager = Alamofire.SessionManager(configuration: configuration)
    
 

	///  Almofire Get request

	/// - parameter url:  Path to hit the server

	/// - parameter completionHandler:  Will return tuple of AnyObject and AnyObject

	/// - parameter failureHandler:  Will return tuple of AnyObject and AnyObject

class func get(url: URL, completionHandler: CompletionBlock? = nil, failureHandler: FailureBlock? = nil) {

		print(" 🛫🛫🛫🛫🛫🛫🛫🛫 get :", url)
Dotzu.sharedManager.addLogger(session: configuration)
		sessionManager.request(url,
		                  method: .get
		)
			.responseJSON { response in
				
           print("🛬🛬🛬🛬🛬🛬🛬🛬 get: - ", response)
				if let json = response.result.value {

					completionHandler!(json as AnyObject, response.result as AnyObject)

				} else {

					failureHandler?("" as AnyObject, "" as AnyObject)

				}

			}
			.responseString { some in

			}

			.responseData { _ in

		}

	}


class func uploadSingleImage(url: URL, jsonObject: [String : Any],
	                             image: UIImage? = nil,
	                             fileName: String? = NSUUID().uuidString,
	                             completionHandler: CompletionBlock? = nil,
	                             failureHandler: FailureBlock? = nil) {

		let headers: HTTPHeaders = [
			/* "Authorization": "your_access_token",  in case you need authorization header */
			"Content-type": "multipart/form-data"
		]

Dotzu.sharedManager.addLogger(session: configuration)
		sessionManager.upload(multipartFormData: { multipartFormData in

			if let image1 = image {

				if let data = UIImageJPEGRepresentation(image1,  1 ) {

					multipartFormData.append(data,

                                             withName: "image",

					                         fileName: "\(fileName!)_\(NSUUID().uuidString).jpeg",
						mimeType: "image/jpeg")
				}
			}

			for (key1, value1) in jsonObject {

			let recieveValue = "\(value1)"

			let someData = recieveValue.data(using: .utf8)

			multipartFormData.append(someData! , withName: key1)

			}

		}, to: url ,  headers: headers ) { encodingResult in

			switch encodingResult {

			case .success(let upload, _, _):

				upload.uploadProgress(closure: { _ in

						// Print progress
				})

				upload.responseJSON { response in

					print("JSON*******: \(response)")

					if let json = response.result.value {

						print("JSON: \(json)")

						completionHandler!(json as AnyObject, response.result as AnyObject)

					} else{
						failureHandler?("" as AnyObject, "" as AnyObject)

					}
				}
				upload.responseString(completionHandler: { (string) in
					print("fds" , string)

				})

			case .failure(let encodingError):

				failureHandler?("" as AnyObject, "" as AnyObject)

				print(encodingError)
			}
		}
	}
    
    class func uploadSingleProfileImage(url: URL, jsonObject: [String : Any],
                                        image: UIImage? = nil,
                                        fileName: String? = NSUUID().uuidString,
                                        completionHandler: CompletionBlock? = nil,
                                        failureHandler: FailureBlock? = nil) {
        
        let headers: HTTPHeaders = [
            /* "Authorization": "your_access_token",  in case you need authorization header */
            "Content-type": "multipart/form-data"
        ]
        
        Dotzu.sharedManager.addLogger(session: configuration)
        sessionManager.upload(multipartFormData: { multipartFormData in
            
            if let image1 = image {
                
                if let data = UIImageJPEGRepresentation(image1,  1 ) {
                    
                    multipartFormData.append(data,
                                             
                                             withName: "image",
                                             
                                             fileName: "\(fileName!)_\(NSUUID().uuidString).jpeg",
                        mimeType: "image/jpeg")
                }
            }
            
            for (key1, value1) in jsonObject {
                
                let recieveValue = "\(value1)"
                
                let someData = recieveValue.data(using: .utf8)
                
                multipartFormData.append(someData! , withName: key1)
                
            }
            
        }, to: url ,  headers: headers ) { encodingResult in
            
            switch encodingResult {
                
            case .success(let upload, _, _):
                
                upload.uploadProgress(closure: { _ in
                    
                    // Print progress
                })
                
                upload.responseJSON { response in
                    
                    print("JSON*******: \(response)")
                    
                    if let json = response.result.value {
                        
                        print("JSON: \(json)")
                        
                        completionHandler!(json as AnyObject, response.result as AnyObject)
                        
                    } else{
                        failureHandler?("" as AnyObject, "" as AnyObject)
                        
                    }
                }
                upload.responseString(completionHandler: { (string) in
                    print("fds" , string)
                    
                })
                
            case .failure(let encodingError):
                
                failureHandler?("" as AnyObject, "" as AnyObject)
                
                print(encodingError)
            }
        }
    }
    
    class func post(url : URL ,
                     jsonObject : [String: Any] ,
                     completionHandler : CompletionBlock? = nil ,
                     failureHandler: FailureBlock? = nil) {
        
    print(" 🛫🛫🛫🛫🛫🛫🛫🛫 post Url:", url, "AlamofireJsonObject: ", jsonObject)
        
    Dotzu.sharedManager.addLogger(session: configuration)
    sessionManager.request(url,
                           method: .post,
                           parameters: jsonObject,
                           encoding: JSONEncoding.default,
                           headers: ["content-type": "application/json"])
        .responseJSON { response in
            
            print("post🌸\(String(describing: response.request?.url)) 🛬🛬🛬🛬🛬🛬🛬🛬" , response)
            
            if let json = response.result.value {
                completionHandler!(json as AnyObject, response.result as AnyObject)
            } else {
                failureHandler?("" as AnyObject, "" as AnyObject)
            }
        }
        .responseString { _ in
            
        }
        .responseData { _ in
    }
  }
}


/*
How to use this ?
First add this class to your project 
Then where u want to call the api 
Do like this 
//
//here we are fetching the data from GET API 

        WebServices.get(url: "YOUR_URL", completionHandler: { (response, _) in
           //response block
            print("😀😀😀😀",response)
           
        }){ (response, _) in
          // ERROR Block
            print("😨😨😨😨")
        }   
  
  
  // u can use this to upload image to server in multipart request
  // POST 
    let requestParameter = ["keyword_of_the_parameter_to_be_send": "YOUR_VALUE_U_WANT_SEND_SERVER" ,"keyword_of_the_parameter_to_be_send": ""value]
  
        WebServices.uploadSingleImage(url: URL_OF_THE_API , jsonObject: requestParameter, image: photoToBeUploaded, fileName: "", completionHandler: { (response, _) in
               print("🅾️",response)
         })  

*/
